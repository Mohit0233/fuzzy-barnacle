name: Go Test with Ephemeral Runner

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read


env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'ap-south-1' }}
  # INSTANCE_TYPES: ${{ secrets.INSTANCE_TYPES && secrets.INSTANCE_TYPES != '' && format('{0}', secrets.INSTANCE_TYPES) || '["t4g.small", "t4g.medium"]' }}
  INSTANCE_TYPES: '[\"t4g.small\", \"t4g.medium\"]'

jobs:
  setup-runner:
    runs-on: aws-runner-t4g.large
    outputs:
      runner_names: ${{ steps.terraform-outputs.outputs.instance_ids }}
      public_ips: ${{ steps.terraform-outputs.outputs.public_ips }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

# Can't fetch AWS CREDS
#      - name: Configure AWS Credentials from Secrets
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ env.AWS_REGION }}
#
#      - name: Deploy EC2 using Terraform
#        id: terraform-outputs
#        run: |
#          cd terraform
#          terraform init
#          terraform apply -auto-approve \
#            -var="aws_region=${{ secrets.AWS_REGION }}" \
#            -var="instance_types=${{ env.INSTANCE_TYPES }}" \
#            -var="runner_token=${{ secrets.RUNNER_CREATOR_GITHUB_TOKEN }}" \
#            -var="github_repo=${{ github.repository }}"
#          echo "instance_ids=$(terraform output -raw instance_ids)" >> $GITHUB_ENV
#          echo "public_ips=$(terraform output -raw public_ips)" >> $GITHUB_ENV


#      - name: Install Dependencies (unzip, Node.js)
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y unzip nodejs

      - name: Install Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.11.2
          terraform_wrapper: false

#      - name: Authenticate with Terraform Cloud
#        env:
#          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}  # Store in GitHub Secrets
#        run: |
#          terraform login


      - name: Configure Terraform Cloud Credentials
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
        run: |
          mkdir -p ~/.terraform.d
          echo '{
            "credentials": {
              "app.terraform.io": {
                "token": "'"$TF_API_TOKEN"'"
              }
            }
          }' > ~/.terraform.d/credentials.tfrc.json

      - name: Deploy EC2 using Terraform Cloud
        id: terraform-outputs
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve 
          #          
          #            -var="aws_region=${{ env.AWS_REGION }}" \
          #            -var="instance_types=${{ env.INSTANCE_TYPES }}" \
          #            -var="runner_token=${{ secrets.RUNNER_CREATOR_GITHUB_TOKEN }}" \
          #            -var="github_repo=${{ github.repository }}"
          
          echo "runner_names=$(terraform output -json runner_names | jq -r 'join(",")')" >> "$GITHUB_ENV"


      - name: Print Runner Names
        run: |
          echo "Runner Names: $runner_names"
  run-on-aws:
    needs: setup-runner
    runs-on: ${{ matrix.runner_label }}  # Dynamically assign runner labels
    strategy:
      fail-fast: false
      matrix:
        runner_label: ${{ fromJson(needs.setup-runner.outputs.runner_names) }}  # Use Terraform output to set runner labels
    steps:
      - name: Check runner logging
        run: |
          echo "Hello from ephemeral AWS runner!"
          uname -a
          lscpu

      - name: Install Go using setup-go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Run main.go
        run: |
          go run main.go

  discover-tests:
    needs: setup-runner
    runs-on: aws-runner-t4g.large
    strategy:
      fail-fast: false
      matrix:
        instance_ip: ${{ fromJson(needs.setup-runner.outputs.public_ips) }}
    outputs:
      test-names: ${{ steps.get-tests.outputs.tests }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21

      - name: Generate go.sum (if missing)
        run: go mod tidy

      - name: Discover Tests
        id: get-tests
        run: |
          TESTS=$(go test ./... -list . | grep '^Test' | jq -R -s -c 'split("\n")[:-1]')
          echo "tests=$TESTS" >> $GITHUB_ENV
          echo "tests=$TESTS" >> $GITHUB_OUTPUT

  run-tests:
    needs: discover-tests
    runs-on: [self-hosted, linux]
    strategy:
      fail-fast: false
      matrix:
        instance_ip: ${{ fromJson(needs.setup-runner.outputs.public_ips) }}
        test-name: ${{ fromJson(needs.discover-tests.outputs.test-names) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21

      - name: Run Specific Test
        run: go test -v -run ${{ matrix.test-name }} ./...

  cleanup-runner:
    needs: run-on-aws
    runs-on: aws-runner-t4g.large
    if: always()  # Ensures this runs even if previous jobs fail
    steps:

      - name: Install Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.11.2
          terraform_wrapper: false

      - name: Configure Terraform Cloud Credentials
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
        run: |
          mkdir -p ~/.terraform.d
          echo '{
          "credentials": {
           "app.terraform.io": {
             "token": "'"$TF_API_TOKEN"'"
           }
          }
          }' > ~/.terraform.d/credentials.tfrc.json

      - name: Deregister and Terminate AWS Runners
        run: |
          cd terraform
          terraform destroy -auto-approve
          #               \
          #            -var="aws_region=${{ env.AWS_REGION }}" \
          #            -var="instance_types=${{ env.INSTANCE_TYPES }}" \
          #            -var="runner_token=${{ secrets.RUNNER_CREATOR_GITHUB_TOKEN }}" \
          #            -var="github_repo=${{ github.repository }}"
          echo "All runners terminated."