name: Go Test with Self Hosted Runner

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read


env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'ap-south-1' }}
  # INSTANCE_TYPES: ${{ secrets.INSTANCE_TYPES && secrets.INSTANCE_TYPES != '' && format('{0}', secrets.INSTANCE_TYPES) || '["t4g.small", "t4g.medium"]' }}
  INSTANCE_TYPES: '[\"t4g.small\", \"t4g.medium\"]'

jobs:

  prerequisite-infra-setup:
    runs-on: aws-runner-t4g.large
    steps:
      - name: Mock
        run: echo "Mocking the infrastructure setup"

  create-runners:
    needs: prerequisite-infra-setup
    runs-on: aws-runner-t4g.large
    outputs:
      runner_names: ${{ steps.terraform-outputs.outputs.runner_names }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Can't fetch AWS CREDS
      #      - name: Configure AWS Credentials from Secrets
      #        uses: aws-actions/configure-aws-credentials@v2
      #        with:
      #          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #          aws-region: ${{ env.AWS_REGION }}
      #
      #      - name: Deploy EC2 using Terraform
      #        id: terraform-outputs
      #        run: |
      #          cd terraform
      #          terraform init
      #          terraform apply -auto-approve \
      #            -var="aws_region=${{ secrets.AWS_REGION }}" \
      #            -var="instance_types=${{ env.INSTANCE_TYPES }}" \
      #            -var="runner_token=${{ secrets.RUNNER_CREATOR_GITHUB_TOKEN }}" \
      #            -var="github_repo=${{ github.repository }}"
      #          echo "instance_ids=$(terraform output -raw instance_ids)" >> $GITHUB_ENV
      #          echo "public_ips=$(terraform output -raw public_ips)" >> $GITHUB_ENV


      #      - name: Install Dependencies (unzip, Node.js)
      #        run: |
      #          sudo apt-get update
      #          sudo apt-get install -y unzip nodejs

      - name: Install Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.11.2
          terraform_wrapper: false

      #      - name: Authenticate with Terraform Cloud
      #        env:
      #          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}  # Store in GitHub Secrets
      #        run: |
      #          terraform login


      - name: Configure Terraform Cloud Credentials
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
        run: |
          mkdir -p ~/.terraform.d
          echo '{
            "credentials": {
              "app.terraform.io": {
                "token": "'"$TF_API_TOKEN"'"
              }
            }
          }' > ~/.terraform.d/credentials.tfrc.json

      - name: Deploy EC2 using Terraform Cloud
        id: terraform-outputs
        run: |
          cd terraform
          terraform init -upgrade
          terraform providers || true
          terraform state list || true
          terraform apply -auto-approve 
          #          
          #            -var="aws_region=${{ env.AWS_REGION }}" \
          #            -var="instance_types=${{ env.INSTANCE_TYPES }}" \
          #            -var="runner_token=${{ secrets.RUNNER_CREATOR_GITHUB_TOKEN }}" \
          #            -var="github_repo=${{ github.repository }}"
          
          #          echo "runner_names=$(terraform output -json runner_names | jq -r 'join(",")')" >> "$GITHUB_ENV"
          #          echo "runner_names=$(terraform output -json runner_names | jq -r 'join(",")')" >> "$GITHUB_OUTPUT"
          #
          #          # Log it separately
          #          RUNNER_NAMES="$(terraform output -json runner_names | jq -r 'join(",")')"
          #          echo "Runner Names: $RUNNER_NAMES"

           RUNNER_NAMES_JSON="$(terraform output -json runner_names | jq -c)"
           echo "runner_names=$RUNNER_NAMES_JSON" >> "$GITHUB_ENV"
           echo "runner_names=$RUNNER_NAMES_JSON" >> "$GITHUB_OUTPUT"
           echo "Runner Names JSON: $RUNNER_NAMES_JSON"


      - name: Debug Runner Names
        run: |
          echo "Runner Names from output: ${{ steps.terraform-outputs.outputs.runner_names }}"

      - name: Debug Terraform Output
        run: |
          echo "Runner Names (GITHUB_ENV): ${{ env.runner_names }}"
          echo "Runner Names (GITHUB_OUTPUT): ${{ steps.terraform-outputs.outputs.runner_names }}"
  

  setup-runners:
    name: ${{ matrix.runner }}
    needs: create-runners
    runs-on: aws-runner-t4g.large
    strategy:
      matrix:
        runner: ${{ fromJson(needs.create-runners.outputs.runner_names) }}
    outputs:
      runner_ready: ${{ matrix.runner }}
    steps:
      - name: Setup ${{ matrix.runner }}
        run: |
          echo "Setting up ${{ matrix.runner }}"
          # wget scripts and run them here
          # sleep 5  # Simulating setup time
          echo "Setup complete for ${{ matrix.runner }}"

  discover-tests:
    runs-on: aws-runner-t4g.large
    outputs:
      test-names: ${{ steps.get-tests.outputs.tests }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Go Environment Variables
        run: |
          echo "GOMODCACHE=$(go env GOMODCACHE)" >> $GITHUB_ENV
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV

      - name: Set Go Paths
        run: |
          echo "GOPATH=${{ github.workspace }}" >> $GITHUB_ENV
          echo "GOMODCACHE=${{ github.workspace }}/go/pkg/mod" >> $GITHUB_ENV
          echo "PATH=${{ github.workspace }}/bin:$PATH" >> $GITHUB_ENV\

      - name: Unset GOPATH
        run: |
          echo "GOPATH=" >> $GITHUB_ENV
          echo "GO111MODULE=on" >> $GITHUB_ENV
          echo "HOME=/home/ubuntu" >> $GITHUB_ENV
          echo "GOCACHE=/home/ubuntu/.cache/go-build" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24

      - name: Debug Go Environment
        run: go env

      - name: Debug Current User
        run: |
          whoami
          id
          env | grep HOME


      - name: Generate go.sum (if missing)
        run: |
          ls -la
          go mod tidy

      - name: Discover Tests
        id: get-tests
        run: |
          TESTS=$(go test ./... -list . | grep '^Test' | jq -R -s -c 'split("\n")[:-1]')
          echo "tests=$TESTS"
          echo "tests=$TESTS" >> $GITHUB_ENV
          echo "tests=$TESTS" >> $GITHUB_OUTPUT 

      - name: ✅ Log Discovered Tests
        run: |
          echo "🧪 The following test cases will be executed:"
          echo '${{ steps.get-tests.outputs.tests }}' | jq -r '.[]' | sed 's/^/- /'
  run-tests:
    name: ${{ matrix.test-name }} on ${{ matrix.runner_label }}
    needs: [ discover-tests, setup-runners ]
    runs-on: ${{ matrix.runner_label }}
    strategy:
      fail-fast: false
      matrix:
        runner_label: [ aws-runner-t4g.large, aws-runner-t4g.large ]
        test-name: ${{ fromJson(needs.discover-tests.outputs.test-names) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run Specific Test
        id: test_execution
        run: |
          mkdir -p test-results
          set +e
          go test -v -run ${{ matrix.test-name }} ./...
          EXIT_CODE=$?
          RESULT="success"
          if [ "$EXIT_CODE" -ne 0 ]; then
            RESULT="failure"
          fi
          FILE_PATH="test-results/${{ matrix.runner_label }}-${{ matrix.test-name }}.csv"
          echo "Saving results to: $FILE_PATH"
          echo "${{ matrix.runner_label }},${{ matrix.test-name }},$RESULT" > "$FILE_PATH"
          exit $EXIT_CODE

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/*.csv

  summary-report:
    needs: run-tests
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download All Test Results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: test-results

      - name: Merge Test Results
        run: |
          echo "Runner,Test Name,Result" > final-results.csv
          for file in test-results/*.csv; do
            if [[ -f "$file" ]]; then
              cat "$file" >> final-results.csv
            fi
          done
          echo "Merged CSV:" && cat final-results.csv

      - name: Generate Markdown Summary
        run: |
          echo "| Runner | Test Name | Result |" > formatted-results.md
          echo "|--------|-----------|--------|" >> formatted-results.md
          tail -n +2 final-results.csv | while IFS=, read -r runner test result; do
            echo "| $runner | $test | $result |" >> formatted-results.md
          done
          cat formatted-results.md
  
          TOTAL=$(($(wc -l < final-results.csv) - 1))
          PASSED=$(grep -c ',success' final-results.csv || echo 0)
          FAILED=$(grep -c ',failure' final-results.csv || echo 0)
  
          echo "## Test Results Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Total Tests:** $TOTAL" >> "$GITHUB_STEP_SUMMARY"
          echo "- ✅ **Passed:** $PASSED" >> "$GITHUB_STEP_SUMMARY"
          echo "- ❌ **Failed:** $FAILED" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          cat formatted-results.md >> "$GITHUB_STEP_SUMMARY"

  cleanup-runner:
    needs: summary-report
    runs-on: aws-runner-t4g.large
    if: always()  # Ensures this runs even if previous jobs fail
    steps:
      - name: Install Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.11.2
          terraform_wrapper: false

      - name: Configure Terraform Cloud Credentials
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
        run: |
          mkdir -p ~/.terraform.d
          echo '{
          "credentials": {
           "app.terraform.io": {
             "token": "'"$TF_API_TOKEN"'"
           }
          }
          }' > ~/.terraform.d/credentials.tfrc.json

      - name: Deregister and Terminate AWS Runners
        run: |
          cd terraform
          terraform destroy -auto-approve
          #               \
          #            -var="aws_region=${{ env.AWS_REGION }}" \
          #            -var="instance_types=${{ env.INSTANCE_TYPES }}" \
          #            -var="runner_token=${{ secrets.RUNNER_CREATOR_GITHUB_TOKEN }}" \
          #            -var="github_repo=${{ github.repository }}"
          echo "All runners terminated."
